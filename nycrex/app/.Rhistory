chisq.test(quiz.data) #Conducting the X^2 test of independence data on the quiz
#data.
#The p-value for this test is very small (0.02001). This is an indication that
#under our null hypothesis, it would be extremely unlikely to observe results
#like we have observed in our data. The null hypothesis states that the attendance
#and grade variables are independent of one another; however, the test provides
#evidence against this assertion. Therefore, we conclude in favor of the
#alternative hypothesis that the variables of attendance and grade are not
#independent of one another.
########################################
#####Chick Weight Data Set Examples#####
########################################
library(datasets) #Load the base R datasets library.
help(chickwts) #See the help documentation for the chickwts dataset to see a
#description of the included variables.
chickwts #Visually inspect the data.
summary(chickwts) #Returns the five-number summary, along with the mean,
#for any continuous variables; returns the count information
#for any categorical variables.
sd(chickwts$weight) #Returns the standard deviation of the weight variable.
var(chickwts$weight) #Returns the variance of the weight variable.
table(chickwts) #Returns a contingency table of weight and feed.
#We are told that the true average weight of chicks should be around 280 grams;
#however, we do not believe this is the case. We want to test the notion that the
#weight of chicks should be centered at a value lower than 280 grams. The average
#chick weight of our dataset is 261.3 grams. Is this significantly different for
#us to change our belief? To decide, we use a One-Sample T-Test:
plot(density(chickwts$weight), main = "Overall Distribution of Chick Weights")
abline(v = mean(chickwts$weight), lwd = 2, lty = 2)
abline(v = 280, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 261.3", "H0 Mean = 280"), lwd = 2,
lty = 2, col = c("black", "red"))
boxplot(chickwts$weight, main = "Overall Distribution of Chick Weights")
abline(h = mean(chickwts$weight), lwd = 2, lty = 2)
abline(h = 280, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 261.3", "H0 Mean = 280"), lwd = 2,
lty = 2, col = c("black", "red"))
t.test(chickwts$weight, mu = 280, alternative = "less")
#The p-value for this test is 0.02376 which is less than our threshold of 0.05.
#Thus, we conclude in favor of the alternative hypothesis; our data supports the
#notion that the true average chick weight is actually less than 280 grams.
#The chicks were fed one of six types of feed; is there evidence that the average
#chick weights are different among the varied categories of feed? To decide, we
#conduct a One-Way ANOVA:
boxplot(chickwts$weight ~ chickwts$feed,
col = c("red", "orange", "yellow", "green", "blue", "violet"),
main = "Distribution of Chick Weights\nfor Various Feed Types")
summary(aov(chickwts$weight ~ chickwts$feed))
#The p-value for this test is <.0005. This is extremely strong evidence that the
#The p-value for this test is <.0005. This is extremely strong evidence that the
#The p-value for this test is <.0005. This is extremely strong evidence that the
#average chick weight is different for the various feed types. We reject the null
#hypothesis that the mean value of chick weight is the same for all categories.
#We are specifically interested in the casein and meatmeal diet types. Do the
#reported chick weights have the same variance? To determine, conduct an F-test:
var.test(chickwts$weight[chickwts$feed == "casein"],
chickwts$weight[chickwts$feed == "meatmeal"],
alternative = "two.sided")
#The p-value for this test is 0.9739 meaning that, under the null hypothesis, we
#would expect to see results at least as extreme as ours about 97.39% of the time.
#Thus, our data does not support the alternative hypothesis that the variance among
#chick weights is different for the casein and meatmeal diet groups.
library(VIM) #For the visualization and imputation of missing values.
help(sleep) #Inspecting the mammal sleep dataset.
sleep
summary(sleep) #Summary information for the sleep dataset.
sapply(sleep, sd) #Standard deviations for the sleep dataset; any issues?
aggr(sleep) #A graphical interpretation of the missing values and their
#combinations within the dataset.
library(mice) #Load the multivariate imputation by chained equations library.
md.pattern(sleep) #Can also view this information from a data perspective.
###############################
#####Mean Value Imputation#####
###############################
#Creating a dataset that has missing values.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
missing.data
mean(missing.data$x2, na.rm = TRUE) #Mean of x2 prior to imputation.
sd(missing.data$x2, na.rm = TRUE) #Standard deviation of x2 prior to imputation.
cor(missing.data, use = "complete.obs") #Correlation prior to imputation.
#Mean value imputation method 1.
missing.data$x2[is.na(missing.data$x2)] = mean(missing.data$x2, na.rm=TRUE)
missing.data
#Mean value imputation method 2.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
missing.data = transform(missing.data, x2 = ifelse(is.na(x2),
mean(x2, na.rm=TRUE),
x2))
missing.data
#Mean value imputation method 3.
library(Hmisc) #Load the Harrell miscellaneous library.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
imputed.x2 = impute(missing.data$x2, mean) #Specifically calling the x2 variable.
imputed.x2
summary(imputed.x2) #Summary information for the imputed variable.
is.imputed(imputed.x2) #Boolean vector indicating imputed values.
missing.data$x2 = imputed.x2 #Replacing the old vector.
mean(missing.data$x2) #Mean of x2 after imputation.
sd(missing.data$x2) #Standard deviation of x2 after imputation.
cor(missing.data, use = "complete.obs") #Correlation afterto imputation.
plot(missing.data) #What are some potential problems with mean value imputation?
##################################
#####Simple Random Imputation#####
##################################
#Recreating a dataset that has missing values.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
missing.data
mean(missing.data$x2, na.rm = TRUE) #Mean of x2 prior to imputation.
sd(missing.data$x2, na.rm = TRUE) #Standard deviation of x2 prior to imputation.
cor(missing.data, use = "complete.obs") #Correlation prior to imputation.
set.seed(0)
imputed.x2 = impute(missing.data$x2, "random") #Simple random imputation using the
#impute() function from the Hmisc package.
imputed.x2
summary(imputed.x2) #Summary information for the imputed variable.
is.imputed(imputed.x2) #Boolean vector indicating imputed values.
missing.data$x2 = imputed.x2 #Replacing the old vector.
mean(missing.data$x2) #Mean of x2 after imputation.
sd(missing.data$x2) #Standard deviation of x2 after imputation.
cor(missing.data, use = "complete.obs") #Correlation afterto imputation.
plot(missing.data) #What are some potential problems with mean value imputation?
#############################
#####K-Nearest Neighbors#####
#############################
#Recreating a dataset that has missing values.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
missing.data
imputed.1nn = kNN(missing.data, k = 1) #Imputing using 1NN.
imputed.5nn = kNN(missing.data, k = 5) #Imputing using 5NN.
imputed.9nn = kNN(missing.data, k = 9) #Imputing using 9NN.
imputed.1nn #Inspecting the imputed values of each of the methods;
imputed.5nn #what is going on here? Given our dataset, should we
imputed.9nn #expect these results?
#K-Nearest Neighbors regression on the sleep dataset.
sqrt(nrow(sleep)) #Determining K for the sleep dataset.
sleep.imputed8NN = kNN(sleep, k = 8) #Using 8 nearest neighbors.
sleep.imputed8NN
sleep.imputed8NN
summary(sleep) #Summary information for the original sleep dataset.
summary(sleep.imputed8NN[, 1:10]) #Summary information for the imputed sleep dataset.
#K-Nearest Neighbors classification on the iris dataset.
help(iris) #Inspecting the iris measurement dataset.
iris
iris.example = iris[, c(1, 2, 5)] #For illustration purposes, pulling only the
#sepal measurements and the flower species.
#Throwing some small amount of noise on top of the data for illustration
#purposes; some observations are on top of each other.
set.seed(0)
iris.example$Sepal.Length = jitter(iris.example$Sepal.Length, factor = .5)
iris.example$Sepal.Width = jitter(iris.example$Sepal.Width, factor= .5)
col.vec = c(rep("red", 50), #Creating a color vector for plotting purposes.
rep("green", 50),
rep("blue", 50))
plot(iris.example$Sepal.Length, iris.example$Sepal.Width,
col = col.vec, pch = 16,
main = "Sepal Measurements of Iris Data")
legend("topleft", c("Setosa", "Versicolor", "Virginica"),
pch = 16, col = c("red", "green", "blue"), cex = .75)
missing.vector = c(41:50, 91:100, 141:150) #Inducing missing values on the Species
iris.example$Species[missing.vector] = NA  #vector for each category.
iris.example
col.vec[missing.vector] = "purple" #Creating a new color vector to
#mark the missing values.
plot(iris.example$Sepal.Length, iris.example$Sepal.Width,
col = col.vec, pch = 16,
main = "Sepal Measurements of Iris Data")
legend("topleft", c("Setosa", "Versicolor", "Virginica", "NA"),
pch = 16, col = c("red", "green", "blue", "purple"), cex = .75)
#Inspecting the Voronoi tesselation for the complete observations in the iris
#dataset.
library(deldir) #Load the Delaunay triangulation and Dirichelet tesselation library.
info = deldir(iris.example$Sepal.Length[-missing.vector],
iris.example$Sepal.Width[-missing.vector])
plot.tile.list(tile.list(info),
fillcol = col.vec[-missing.vector],
main = "Iris Voronoi Tessellation\nDecision Boundaries")
#Adding the observations that are missing species information.
points(iris.example$Sepal.Length[missing.vector],
iris.example$Sepal.Width[missing.vector],
pch = 16, col = "white")
points(iris.example$Sepal.Length[missing.vector],
iris.example$Sepal.Width[missing.vector],
pch = "?", cex = .66)
#Conducting a 1NN classification imputation.
iris.imputed1NN = kNN(iris.example, k = 1)
#Assessing the results by comparing to the truth known by the original dataset.
table(iris$Species, iris.imputed1NN$Species)
#Conducting a 12NN classification imputation based on the square root of n.
sqrt(nrow(iris.example))
iris.imputed12NN = kNN(iris.example, k = 12)
#Assessing the results by comparing to the truth known by the original dataset.
table(iris$Species, iris.imputed12NN$Species)
##################################################
#####Using Minkowski Distance Measures in KNN#####
##################################################
library(kknn) #Load the weighted knn library.
#Separating the complete and missing observations for use in the kknn() function.
complete = iris.example[-missing.vector, ]
missing = iris.example[missing.vector, -3]
#Distance corresponds to the Minkowski power.
iris.euclidean = kknn(Species ~ ., complete, missing, k = 12, distance = 2)
summary(iris.euclidean)
iris.manhattan = kknn(Species ~ ., complete, missing, k = 12, distance = 1)
summary(iris.manhattan)
help(cars)
cars #Investigating the cars dataset.
#Basic numerical EDA for cars dataset.
summary(cars) #Five number summaries.
sapply(cars, sd) #Standard deviations.
cor(cars) #Correlations.
#Basic graphical EDA for cars dataset.
hist(cars$speed, xlab = "Speed in MPH", main = "Histogram of Speed")
hist(cars$dist, xlab = "Distance in Feet", main = "Histogram of Distance")
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
#Manual calculation of simple linear regression coefficients.
beta1 = sum((cars$speed - mean(cars$speed)) * (cars$dist - mean(cars$dist))) /
sum((cars$speed - mean(cars$speed))^2)
beta0 = mean(cars$dist) - beta1*mean(cars$speed)
#Adding the least squares regression line to the plot.
abline(beta0, beta1, lty = 2)
#Calculating the residual values.
residuals = cars$dist - (beta0 + beta1*cars$speed)
#Note the sum of the residuals is 0.
sum(residuals)
#Visualizing the residuals.
segments(cars$speed, cars$dist,
cars$speed, (beta0 + beta1*cars$speed),
col = "red")
text(cars$speed - .5, cars$dist, round(residuals, 2), cex = 0.5)
#################################################
#####Automatic example with the cars dataset#####
#################################################
model = lm(dist ~ speed, data = cars) #Use the linear model function lm() to
#conduct the simple linear regression.
summary(model) #All the summary information for the model in question. Reports:
#-The five number summary of the residuals.
#-The coefficient estimates.
#-The coeffiient standard errors.
#-The t-test for significance of the coefficient estimates.
#-The p-values for the significance tests.
#-The level of significance.
#-The RSE and degrees of freedom for the model.
#-The coefficient of determination, R^2.
#-The overall model F-statistic and corresponding p-value.
#The equation of the model can be constructed from the output:
#Predicted Distance = -17.6 + (3.9)*Speed
#The interpretation for the slope coefficient: With a 1 MPH increase in car speed,
#the stopping distance, on average, increases by approximately 3.9 feet.
#The interpretation for the intercept coefficient: When a car's speed is 0 MPH,
#the stopping distance, on average, is -17.6 MPH. Theoretically, does this make
#sense? Why might this be the case?
#The residual standard error is about 15.38; this is an approximation of how much
#the residuas tend to deviate around the regression line.
#The coefficient of determination is about 0.65; approximately 65% of the variability
#in the distance variable is explained by the speed variable.
#The intercept, slope, and overall regression is extremely significant (p-values
#all below 0.05).
#Notice that the F-statistic value for the overall regression is the same as the
#square of the t-statistic value for the speed coefficient:
t.statistic = 9.464
f.statistic = 89.57
t.statistic^2
confint(model) #Creating 95% confidence intervals for the model coefficients.
summary(model) #All the summary information for the model in question. Reports:
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
abline(model, lty = 2)
#Constant Variance & Independent Errors
plot(model$fitted, model$residuals,
xlab = "Fitted Values", ylab = "Residual Values",
main = "Residual Plot for Cars Dataset")
abline(h = 0, lty = 2)
#Normality
qqnorm(model$residuals)
qqline(model$residuals)
#Using the built-in plot() function to visualize the residual plots.
plot(model) #Note the addition of the loess smoother and scale-location plot
library(car) #Companion to applied regression.
influencePlot(model)
#####################################
#####Predicting New Observations#####
#####################################
model$fitted.values #Returns the fitted values.
newdata = data.frame(speed = c(15, 20, 25)) #Creating a new data frame to pass
#to the predict() function.
predict(model, newdata, interval = "confidence") #Construct confidence intervals
#for the average value of an
#outcome at a specific point.
predict(model, newdata, interval = "prediction") #Construct prediction invervals
#for a single observation's
shiny::runApp('Dropbox/NYCDSA/Projects/20151009 - Shiny Project')
class(portfolio)
shiny::runApp('Dropbox/NYCDSA/Projects/20151009 - Shiny Project')
shiny::runApp('Dropbox/NYCDSA/Projects/20151009 - Shiny Project')
shiny::runApp('Dropbox/NYCDSA/Projects/20151009 - Shiny Project')
shiny::runApp('Dropbox/NYCDSA/Projects/20151009 - Shiny Project')
shiny::runApp('Dropbox/NYCDSA/Projects/20151009 - Shiny Project')
?plot_ly
shiny::runApp('Dropbox/NYCDSA/Projects/20151009 - Shiny Project')
shiny::runApp('Dropbox/NYCDSA/Projects/20151009 - Shiny Project')
shiny::runGitHub('FHLBPortfolio', 'joeinnyc')
views <- c("Econometrics", "Finance", "MachineLearning")
install.views(views)
install.packages("ctv")
library(ctv)
install.views(views)
library(Rbitcoin)
?"Rbitcoin"
?vignette
vignette(Rbitcoin)
vignette("Rbitcoin")
shiny::runGitHub("jangorecki/shinyBTC")
market <- "kraken"
currency_pair <- c("BTC","EUR")
ticker <- market.api.process(market, currency_pair, "ticker")
ticker
ticker
ticker <- market.api.process(market, currency_pair, "ticker")
ticker
trades <- market.api.process(market,currency_pair,"trades")
trades[["trades"]][,tail(.SD,10)] # print only last 10 trades
trades
trades$trades
trades <- trade$trades
tra <- trades$trades
View(tra)
plot(tra.date, tra.price)
plot(tra$date, tra$price)
rbtc.plot(trades)
order_book <- market.api.process(market,currency_pair,"order_book")
rbtc.plot(order_book)
order_book
order_book[["asks"]][,head(.SD,10)] # print only first 10 asks
wallet <- market.api.process(market, action = "wallet", key = "", secret = "")
wallet[["wallet"]] # print currencies and their amount in the wallet
wallet <- market.api.process(market, action = "wallet", key = "", secret = "", currency_pair = currency_pair)
wallet[["wallet"]] # print currencies and their amount in the wallet
place_limit_order <- market.api.process(market, currency_pair, action = "place_limit_order",
req = list(type = "buy",
price = 500,
amount = 0.15)
key = "", secret = "")
key = "", secret = "")
open_orders <- market.api.process(market, action = "open_orders", key = "", secret = "")
cancel_order <- market.api.process(market, action = "cancel_order",
req = list(oid = "")
key = "", secret = "")
api.dict <- getOption("Rbitcoin.api.dict")
api.dict[!is.na(base), .(market, currency_pair = paste0(base,quote))][,unique(.SD)]
fromBTC(1) # current BTCUSD price
toBTC(150, "GBP") # convert 150 GBP to BTC
addr <- blockchain.api.process('1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa')
View(addr)
blockchain.api.process('15Mb2QcgF3XDMeVn6M7oCG6CQLw4mkedDi')[["total_received"]]
# some transaction details
tx <- blockchain.api.process('e5c4de1c70cb6d60db53410e871e9cab6a0ba75404360bf4cda1b993e58d45f8')
str(tx, max.level=1)
tx
market.sources <- list(
"john smith" = list(market='kraken', key='', secret=''),
"jane smith" = list(market='kraken', key='', secret=''),
"john smith" = list(market='btce', key='', secret=''),
"jane smith" = list(market='btce', key='', secret='')
)
# example blockchain.sources
blockchain.sources <- list(
"john smith" = list(address='')
)
# example manual.sources
manual.sources <- list(
"john smith" = list(location='bitfinex', location_type='market',
currency=c('BTC','USD'), amount=c(0.4,0)),
"john smith" = list(location='fidor', location_type='bank',
currency=c('EUR','USD'), amount=c(20,0)),
"jane smith" = list(location='fidor', location_type='bank',
currency=c('EUR','GBP'), amount=c(10,105))
)
# execute
wallet_dt <- wallet_manager(
market.sources = market.sources,
blockchain.sources = blockchain.sources,
manual.sources = manual.sources,
value_currency = 'USD', # your target currency
rate_priority = c('bitstamp','kraken','hitbtc','btce','bitmarket'), # value rates source priority
archive_write = TRUE # by default FALSE, read ?wallet_manager
)
```
```{r populate_wallet_dt, echo=FALSE}
full_wallet_dt <- structure(
list(wallet_id = c(1396310400L, 1396310400L, 1396310400L, 1396310400L, 1396310400L, 1396310400L, 1396310400L, 1396310400L, 1396310400L, 1396310400L, 1396310400L, 1396310400L,1396310400L, 1396310400L, 1396310400L, 1396310400L, 1396310400L, 1396310400L, 1398902400L, 1398902400L, 1398902400L, 1398902400L, 1398902400L, 1398902400L, 1398902400L, 1398902400L, 1398902400L, 1398902400L, 1398902400L, 1398902400L, 1398902400L, 1398902400L, 1398902400L, 1398902400L, 1398902400L, 1398902400L, 1401580800L, 1401580800L, 1401580800L, 1401580800L, 1401580800L, 1401580800L, 1401580800L, 1401580800L, 1401580800L, 1401580800L, 1401580800L, 1401580800L, 1401580800L, 1401580800L, 1401580800L, 1401580800L, 1401580800L, 1401580800L, 1404172800L, 1404172800L, 1404172800L, 1404172800L, 1404172800L, 1404172800L, 1404172800L, 1404172800L, 1404172800L, 1404172800L, 1404172800L, 1404172800L, 1404172800L, 1404172800L, 1404172800L, 1404172800L, 1404172800L, 1404172800L, 1406851200L, 1406851200L, 1406851200L, 1406851200L, 1406851200L, 1406851200L, 1406851200L, 1406851200L, 1406851200L, 1406851200L, 1406851200L, 1406851200L, 1406851200L, 1406851200L, 1406851200L, 1406851200L, 1406851200L, 1406851200L, 1409529600L, 1409529600L, 1409529600L, 1409529600L, 1409529600L, 1409529600L, 1409529600L, 1409529600L, 1409529600L, 1409529600L, 1409529600L, 1409529600L, 1409529600L, 1409529600L, 1409529600L, 1409529600L, 1409529600L, 1409529600L),
currency = c("BTC", "BTC", "BTC", "BTC", "BTC", "EUR", "EUR", "EUR", "EUR", "GBP", "LTC", "LTC", "LTC", "USD", "USD", "USD", "USD", "USD", "BTC", "BTC", "BTC", "BTC", "BTC", "EUR", "EUR", "EUR", "EUR", "GBP", "LTC", "LTC", "LTC", "USD", "USD", "USD", "USD", "USD", "BTC", "BTC", "BTC", "BTC", "BTC", "EUR", "EUR", "EUR", "EUR", "GBP", "LTC", "LTC", "LTC", "USD", "USD", "USD", "USD", "USD", "BTC", "BTC", "BTC", "BTC", "BTC", "EUR", "EUR", "EUR", "EUR", "GBP", "LTC", "LTC", "LTC", "USD", "USD", "USD", "USD", "USD", "BTC", "BTC", "BTC", "BTC", "BTC", "EUR", "EUR", "EUR", "EUR", "GBP", "LTC", "LTC", "LTC", "USD", "USD", "USD", "USD", "USD", "BTC", "BTC", "BTC", "BTC", "BTC", "EUR", "EUR", "EUR", "EUR", "GBP", "LTC", "LTC", "LTC", "USD", "USD", "USD", "USD", "USD"),
currency_type = c("crypto", "crypto", "crypto", "crypto", "crypto", "fiat", "fiat", "fiat", "fiat", "fiat", "crypto", "crypto", "crypto", "fiat", "fiat", "fiat", "fiat", "fiat", "crypto", "crypto", "crypto", "crypto", "crypto", "fiat", "fiat", "fiat", "fiat", "fiat", "crypto", "crypto", "crypto", "fiat", "fiat", "fiat", "fiat", "fiat", "crypto", "crypto", "crypto", "crypto", "crypto", "fiat", "fiat", "fiat", "fiat", "fiat", "crypto", "crypto", "crypto", "fiat", "fiat", "fiat", "fiat", "fiat", "crypto", "crypto", "crypto", "crypto", "crypto", "fiat", "fiat", "fiat", "fiat", "fiat", "crypto", "crypto", "crypto", "fiat", "fiat", "fiat", "fiat", "fiat", "crypto", "crypto", "crypto", "crypto", "crypto", "fiat", "fiat", "fiat", "fiat", "fiat", "crypto", "crypto", "crypto", "fiat", "fiat", "fiat", "fiat", "fiat", "crypto", "crypto", "crypto", "crypto", "crypto", "fiat", "fiat", "fiat", "fiat", "fiat", "crypto", "crypto", "crypto", "fiat", "fiat", "fiat", "fiat", "fiat"),
auth = c("john smith", "john smith", "jane smith", "john smith", "john smith", "jane smith", "john smith", "john smith", "jane smith", "jane smith", "john smith", "jane smith", "jane smith", "john smith", "john smith", "john smith", "john smith", "jane smith", "john smith", "john smith", "jane smith", "john smith", "john smith", "jane smith", "john smith", "john smith", "jane smith", "jane smith", "john smith", "jane smith", "jane smith", "john smith", "john smith", "john smith", "john smith", "jane smith", "john smith", "john smith", "jane smith", "john smith", "john smith", "jane smith", "john smith", "john smith", "jane smith", "jane smith", "john smith", "jane smith", "jane smith", "john smith", "john smith", "john smith", "john smith", "jane smith", "john smith", "john smith", "jane smith", "john smith", "john smith", "jane smith", "john smith", "john smith", "jane smith", "jane smith", "john smith", "jane smith", "jane smith", "john smith", "john smith", "john smith", "john smith", "jane smith", "john smith", "john smith", "jane smith", "john smith", "john smith", "jane smith", "john smith", "john smith", "jane smith", "jane smith", "john smith", "jane smith", "jane smith", "john smith", "john smith", "john smith", "john smith", "jane smith", "john smith", "john smith", "jane smith", "john smith", "john smith", "jane smith", "john smith", "john smith", "jane smith", "jane smith", "john smith", "jane smith", "jane smith", "john smith", "john smith", "john smith", "john smith", "jane smith"),
timestamp = structure(c(1396310400, 1396310400, 1396310400, 1396310400, 1396310400, 1396310400, 1396310400, 1396310400, 1396310400, 1396310400, 1396310400, 1396310400, 1396310400, 1396310400, 1396310400, 1396310400, 1396310400, 1396310400, 1398902400, 1398902400, 1398902400, 1398902400, 1398902400, 1398902400, 1398902400, 1398902400, 1398902400, 1398902400, 1398902400, 1398902400, 1398902400, 1398902400, 1398902400, 1398902400, 1398902400, 1398902400, 1401580800, 1401580800, 1401580800, 1401580800, 1401580800, 1401580800, 1401580800, 1401580800, 1401580800, 1401580800, 1401580800, 1401580800, 1401580800, 1401580800, 1401580800, 1401580800, 1401580800, 1401580800, 1404172800, 1404172800, 1404172800, 1404172800, 1404172800, 1404172800, 1404172800, 1404172800, 1404172800, 1404172800, 1404172800, 1404172800, 1404172800, 1404172800, 1404172800, 1404172800, 1404172800, 1404172800, 1406851200, 1406851200, 1406851200, 1406851200, 1406851200, 1406851200, 1406851200, 1406851200, 1406851200, 1406851200, 1406851200, 1406851200, 1406851200, 1406851200, 1406851200, 1406851200, 1406851200, 1406851200, 1409529600, 1409529600, 1409529600, 1409529600, 1409529600, 1409529600, 1409529600, 1409529600, 1409529600, 1409529600, 1409529600, 1409529600, 1409529600, 1409529600, 1409529600, 1409529600, 1409529600, 1409529600), class = c("POSIXct", "POSIXt"), tzone = "UTC"),
location = c("bitfinex", "kraken", "kraken", "btce", "15Mb2QcgF3XDMeVn6M7oCG6CQLw4mkedDi", "fidor", "fidor", "kraken", "kraken", "fidor", "kraken", "kraken", "btce", "fidor", "bitfinex", "kraken", "btce", "btce", "bitfinex", "kraken", "kraken", "btce", "15Mb2QcgF3XDMeVn6M7oCG6CQLw4mkedDi", "fidor", "fidor", "kraken", "kraken", "fidor", "kraken", "kraken", "btce", "fidor", "bitfinex", "kraken", "btce", "btce", "bitfinex", "kraken", "kraken", "btce", "15Mb2QcgF3XDMeVn6M7oCG6CQLw4mkedDi", "fidor", "fidor", "kraken", "kraken", "fidor", "kraken", "kraken", "btce", "fidor", "bitfinex", "kraken", "btce", "btce", "bitfinex", "kraken", "kraken", "btce", "15Mb2QcgF3XDMeVn6M7oCG6CQLw4mkedDi", "fidor", "fidor", "kraken", "kraken", "fidor", "kraken", "kraken", "btce", "fidor", "bitfinex", "kraken", "btce", "btce", "bitfinex", "kraken", "kraken", "btce", "15Mb2QcgF3XDMeVn6M7oCG6CQLw4mkedDi", "fidor", "fidor", "kraken", "kraken", "fidor", "kraken", "kraken", "btce", "fidor", "bitfinex", "kraken", "btce", "btce", "bitfinex", "kraken", "kraken", "btce", "15Mb2QcgF3XDMeVn6M7oCG6CQLw4mkedDi", "fidor", "fidor", "kraken", "kraken", "fidor", "kraken", "kraken", "btce", "fidor", "bitfinex", "kraken", "btce", "btce"),
location_type = c("market", "market", "market", "market", "blockchain", "bank", "bank", "market", "market", "bank", "market", "market", "market", "bank", "market", "market", "market", "market", "market", "market", "market", "market", "blockchain", "bank", "bank", "market", "market", "bank", "market", "market", "market", "bank", "market", "market", "market", "market", "market", "market", "market", "market", "blockchain", "bank", "bank", "market", "market", "bank", "market", "market", "market", "bank", "market", "market", "market", "market", "market", "market", "market", "market", "blockchain", "bank", "bank", "market", "market", "bank", "market", "market", "market", "bank", "market", "market", "market", "market", "market", "market", "market", "market", "blockchain", "bank", "bank", "market", "market", "bank", "market", "market", "market", "bank", "market", "market", "market", "market", "market", "market", "market", "market", "blockchain", "bank", "bank", "market", "market", "bank", "market", "market", "market", "bank", "market", "market", "market", "market"),
amount = c(0, 0.15, 0, 0, 0.1, 190, 130, 40, 80, 110, 0, 4, 1, 275, 25, 10, 30, 30, 0, 0.15, 0, 0, 0.1, 10, 0, 170, 260, 0, 0, 4, 1, 0, 100, 110, 130, 205, 0.22, 0.6, 0.45, 0.3, 0.1, 10, 10, 0, 40, 15, 10, 8, 10.5, 0, 0, 5, 15, 105, 0.12, 0.1, 0.45, 0.3, 0.7, 10, 20, 0, 40, 105, 10, 0, 18.5, 0, 0, 5, 0, 5, 0, 0.1, 0.2, 0, 0.15, 10, 20, 0, 140, 105, 10, 5, 0, 0, 400, 5, 225, 160, 0.4, 0.1, 0.6, 0.4, 0.55, 10, 20, 0, 0, 105, 10, 5, 35, 0, 0, 5, 50, 15),
value_currency = c
value_rate = c(478.98, 478.98, 478.98, 478.98, 478.98, 1.380905, 1.380905, 1.380905, 1.380905, 1.674109, 13.24, 13.24, 13.24, 1, 1, 1, 1, 1, 460.97, 460.97, 460.97, 460.97, 460.97, 1.373171, 1.373171, 1.373171, 1.373171, 1.68398, 11.02, 11.02, 11.02, 1, 1, 1, 1, 1, 630.99, 630.99, 630.99, 630.99, 630.99, 1.359912, 1.359912, 1.359912, 1.359912, 1.691485, 11.04, 11.04, 11.04, 1, 1, 1, 1, 1, 638.25, 638.25, 638.25, 638.25, 638.25, 1.353611, 1.353611, 1.353611, 1.353611, 1.70729, 7.83, 7.83, 7.83, 1, 1, 1, 1, 1, 589.59, 589.59, 589.59, 589.59, 589.59, 1.331674, 1.331674, 1.331674, 1.331674, 1.669659, 7.67, 7.67, 7.67, 1, 1, 1, 1, 1, 474.54, 474.54, 474.54, 474.54, 474.54, 1.288716, 1.288716, 1.288716, 1.288716, 1.629786, 4.7, 4.7, 4.7, 1, 1, 1, 1, 1),
value = c(0, 71.847, 0, 0, 47.898, 262.37195, 179.51765, 55.2362, 110.4724, 184.15199, 0, 52.96, 13.24, 275, 25, 10, 30, 30, 0, 69.1455, 0, 0, 46.097, 13.73171, 0, 233.43907, 357.02446, 0, 0, 44.08, 11.02, 0, 100, 110, 130, 205, 138.8178, 378.594, 283.9455, 189.297, 63.099, 13.59912, 13.59912, 0, 54.39648, 25.372275, 110.4, 88.32, 115.92, 0, 0, 5, 15, 105, 76.59, 63.825, 287.2125, 191.475, 446.775, 13.53611, 27.07222, 0, 54.14444, 179.26545, 78.3, 0, 144.855, 0, 0, 5, 0, 5, 0, 58.959, 117.918, 0, 88.4385, 13.31674, 26.63348, 0, 186.43436, 175.314195, 76.7, 38.35, 0, 0, 400, 5, 225, 160, 189.816, 47.454, 284.724, 189.816, 260.997, 12.88716, 25.77432, 0, 0, 171.12753, 47, 23.5, 164.5, 0, 0, 5, 50, 15)),
.Names = c("wallet_id", "currency", "currency_type", "auth", "timestamp", "location", "location_type", "amount", "value_currency", "value_rate", "value"),
row.names = c(NA, -108L),
class = c("data.table", "data.frame"),
sorted = c("wallet_id", "currency")
)
```
Function gathers all the wallet balances from specified sources, calculates its values in specified *value_currency* and returns following structure (*value_currency* can be also cryptocurrency).
```{r wallet_manager_recent_str, echo=c(2)}
wallet_dt <- full_wallet_dt[wallet_id==max(wallet_id)] # ECHO OFF recent wallet from populated data
str(wallet_dt)
```
Simple plot of only recent balances, last wallet manager check on example dummy data.
```{r wallet_manager_recent_plot, echo=c(1), fig.width = 7, fig.height = 7}
rbtc.plot(wallet_dt) # type="recent" due to `archive_read=FALSE` so: wallet_dt[,length(unique(wallet_id))]==1
wallet_dt <- full_wallet_dt # ECHO OFF full wallet archive from populated data
```
After multiple runs of `wallet_manager(..., archive_write=TRUE)` we may plot historical balances.
Simple low-resolution (monthly, n=6) example of wallet manager dummy data over time.
```{r wallet_manager_archive_load, eval=FALSE}
# load archive only
wallet_dt <- wallet_manager(archive_write=FALSE, archive_read=TRUE)
```
```{r wallet_manager_archive_plot_value, eval=c(1), fig.width = 7, fig.height = 7}
rbtc.plot(wallet_dt) # type="value" due to `archive_read=TRUE`
# in case of poor legend scaling it might be better to export plot to file
svg("wallet_manager_value.svg")
rbtc.plot(wallet_dt)
dev.off()
```
Notice the graphs in this html are in *svg* format so are well zoomable.
open_orders <- market.api.process(market, action = "open_orders", key = "", secret = "")
cancel_order <- market.api.process(market, action = "cancel_order",
req = list(oid = "")
key = "", secret = "")
api.dict <- getOption("Rbitcoin.api.dict")
api.dict[!is.na(base), .(market, currency_pair = paste0(base,quote))][,unique(.SD)]
ticker <- market.api.process(market, currency_pair, "ticker")
ticker
market.api.process(market, currency_pair, "ticker")
currency_pair <- c("BTC","USD")
ticker <- market.api.process(market, currency_pair, "ticker")
ticker
currency_pair <- c("USD","BTC")
```
ticker <- market.api.process(market, currency_pair, "ticker")
currency_pair <- c("XBT","USD")
ticker <- market.api.process(market, currency_pair, "ticker")
ticker
ticker <- market.api.process(market, currency_pair, "ticker")
install.packages("Rvest")
install.packages("rvest")
library(httr)
library(RCurl)
library(XML)
library(RJSONIO)
library(selectr)
library(rvest)
url <- "http://www.theacsi.org/index.php? option=com_content&view=article&id=147&catid=&Itemid=212&i=Airlines"
readHTMLTable(url)
url2 <- "https://en.wikipedia.org/wiki/List_of_Academy_Award-winning_films"
readHTMLTable(url2)
named list()
url3 <- url2
data <- html(url3)
tester <- data %>%
html_nodes(".wikitable") %>%
html_table() %>%
as.data.frame()
tester
View(tester)
api <- "682cd7425157c97e3129312c9b2eed82:4:73192183"
q <- "jp+morgan"
records <- 500
pageRange <- 0:(records/10-1)
dat <- c()
for (i in pageRange){}
for (i in pageRange){
}
for (i in pageRange){  uri <- paste0("http://api.nytimes.com/svc/search/v/articlesearch.json?q=", q, "&page=", i, "&fl=pub_date&api-key=", api)  d <- getURL(uri)  res <- fromJSON(d,simplify = FALSE)  dat <- append(dat, unlist(res$response$docs))}
for (i in pageRange){  uri <- paste0("http://api.nytimes.com/svc/search/v/articlesearch.json?q=", q, "&page=", i, "&fl=pub_date&api-key=", api)  d <- getURL(uri)  res <- fromJSON(d,simplify = FALSE)  dat <- append(dat, unlist(res$response$docs))}
for (i in pageRange){
uri <- paste0("http://api.nytimes.com/svc/search/v/articlesearch.json?q=", q, "&page=", i, "&fl=pub_date&api-key=", api)
d <- getURL(uri)
res <- fromJSON(d,simplify = FALSE)
dat <- append(dat, unlist(res$response$docs))
}
for (i in pageRange){
uri <- paste0("http://api.nytimes.com/svc/search/v/articlesearch.json?q=", q, "&page=", i, "&fl=pub_date&api-key=", api)
d <- getURL(uri)
res <- fromJSON(d,simplify = FALSE)
dat <- append(dat, unlist(res$response$docs))
}
uri <- paste0("http://api.nytimes.com/svc/search/v/articlesearch.json?q=jp+morgan&page=1&fl=pub_date&api-key=", api)
d <- getURL(uri)
res <- fromJSON(d,simplify = FALSE)
setwd("~/Desktop/github/NYCREx/nycrex/app")
shiny::runApp()
shiny::runApp()
library(shiny)
library(shinythemes)
library(leaflet)
library(RColorBrewer)
library(scales)
library(lattice)
library(dplyr)
library(choroplethr)
library(choroplethrZip)
library(ggplot2)
shiny::runApp()
shiny::runApp()
shiny::runApp()
